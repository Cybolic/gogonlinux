#!/usr/bin/env python

import sys
import getopt
import os
import ConfigParser
import subprocess
import shutil
import getpass
import tempfile
from distutils import dir_util

from gog_utils import gog_conn
from gog_utils import gol_connection as site_conn
from gog_utils import gog_db
from gog_utils import version

class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg

general_path = os.path.join(os.getenv("HOME"),".gog-tux")
config_path = os.path.join(general_path,"config")
database_path = os.path.join(general_path,"db.json")
        

def print_usage():
    # I know, this is ugly, apologies
    print "Usage: gog-installer [--token=<token> --secret=<secret>] [--install-path=<path>] [--setup=<setup.exe>] [-u|--uninstall] [-r|--run] [--list] [--available] [--beta] [--version] <game_id>"
    print ("       This program is to be used as a downloader+installer for gogonlinux.com games.\n"
          "       Typically you will want to run this program through the gog-tux graphical interface\n"
          "       instead of the command line directly.\n"
          "       --token is the secret authorization token received\n"
          "               from gog.com upon a successful login\n"
          "       --secret is the secret authorization key received\n"
          "                from gog.com upon a successful login\n"
          "       --install-path is the OPTIONAL parameter for the install\n"
          "                      location of the game (default is ~/games/gog/<game_id>)\n"
          "       -h/--help will show this info text again\n"
          "       -u/--uninstall is used if you want to uninstall a previously installed game\n"
          "       -r/--run is used to launch the game from the command line without having to move into the target's directory\n"
          "       --setup is used to specify a local setup file instead of downloading a new one from gog.com\n"
          "       --beta enables support for beta testing versions of games on gogonlinux.com\n"
          "       --version prints version details for this software\n"
          "       --list shows the list of installed games and their pathname\n"
          "       --available shows all the available games on gogonlinux.com")

def show_version():
    print "gog-installer application version %s" % version.version
    print "developed by %s <%s>" % (version.author, version.email)
    print "see more info with the --help flag"

#TODO: this one is copied from gog_gui, I should refactor them into a single module
def load_settings(conf):
    parser = ConfigParser.ConfigParser()
    parser.read(conf)
    sets = {}
    section = "settings"
    for opt in parser.options(section):
        try:
            sets[opt] = parser.get(section, opt)
        except:
            print "Exception in config parsing on %s " % option
            sets[opt] = None
    return sets

def main(argv=None):
    #first we set up unbuffered output in case we need to print to GUI (gog-tux)
    unbuffered = os.fdopen(sys.stdout.fileno(), 'w', 0)
    sys.stdout.close()
    sys.stdout = unbuffered

    if not os.path.exists(os.path.join(os.getenv("HOME"), ".gog-tux")):
        os.makedirs(os.path.join(os.getenv("HOME"),".gog-tux"))
    if argv is None:
        argv = sys.argv
    try:
        try: 
            opts, args = getopt.getopt(argv[1:], "hur", ["help","token=","secret=","uninstall",
                                                         "run","install-path=","setup=","beta",
                                                         "version","list","available"])
        except getopt.error, msg:
            raise Usage(msg)
        path = ""
        token = ""
        secret = ""
        setupfile = ""
        beta = False
        show_list = False
        show_avail = False
        for o, a in opts:
            if o in ("-h", "--help"):
                print_usage()
                return 0
            elif o == "--token":
                token = a
            elif o == "--secret":
                secret = a
            elif o == "--install-path":
                path = a
            elif o in ("-u", "--uninstall"):
                do_uninstall(args)
                return 
            elif o in ("-r", "--run"):
                do_launch(args)
                return
            elif o in ("--setup"):
                setupfile = a
            elif o in ("--beta"):
                beta = True
            elif o in ("--version"):
                show_version()
                return
            elif o in ("--list"):
                show_list = True
            elif o in ("--available"):
                show_avail = True

        if show_list:
            print_list()
            return
        if show_avail: 
            print_avail(beta)
            return
        global general_path
        global config_path
        global database_path
        if len(args) == 0:
            raise Usage("Wrong number of arguments, you need at least the id of the game you wish to install/uninstall")
        game_id = args[0]
        settings = load_settings(config_path)
        database = gog_db.GogDatabase(database_path)
        database.update()
        if database.has_game(game_id):
            raise Usage("Game is already installed in the database at %s " % database.games[game_id].install_path)
        if path == "":
            path = os.path.join(settings["install_path"],game_id)
        if setupfile == "":
            if token=="" or secret=="": # we need to ask for username and password instead
                email = raw_input("gog.com email address: ")
                password = getpass.getpass()
                is_user = True
            else:
                is_user = False
            conn = gog_conn.GogConnection()
            if is_user:
                try:
                    conn.connect(email,password)
                except:
                    raise Usage("Login failed. Be sure you are connected to the internet and that your email and password"
                                " are correct and working")
            else:
                conn.set_auth_token(token,secret)
            print "Retrieving installer..."
            deletesetup = True
            try:
                setup = conn.download_game(game_id,tempfile.gettempdir())
            except Exception as e:
                print "Couldn't fetch installer, exiting install process"
                return 3
        else:
            deletesetup = False
            setup = setupfile

        print "Extracting data..."
        os.makedirs(path)
        command = "cd %s && innoextract -q %s" % (path, setup)
        #let's extract the file
        shell = subprocess.Popen(["sh"], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        shell.stdin.write(command+"\n")
        shell.communicate()
        # TODO: we should check the return value of the script to make sure it worked fine else 
        #       problems might ensue
        shell.stdin.close()
        shutil.rmtree(os.path.join(path,"tmp"))
        dir_util.copy_tree(os.path.join(path,"app"),path)
        shutil.rmtree(os.path.join(path,"app"))
        if deletesetup:
            os.remove(setup)
        print "Updating local database..."
        # Now we need to update the local database and download the install/uninstall scripts
        if not beta:
            data = site_conn.obtain_available_games()
        else:
            data = site_conn.obtain_beta_available_games()
        game_data = data[game_id]
        game = gog_db.GameRecord(game_data["title"],game_data)
        database.add_game(game_id,game)
        # let's download the install/uninstall scripts
        print "Retrieving game scripts from remote server..."
        if not os.path.exists(os.path.join(general_path,"scripts")):
            os.makedirs(os.path.join(general_path,"scripts"))
        # XXX: All these "install_script"/"install_path" variable names are confusing, might go back to it and rename
        install_script = os.path.join(general_path,"scripts","install_%s" % game_id)
        uninstall_script = os.path.join(general_path,"scripts","uninstall_%s" % game_id)
        launch_script = os.path.join(path,"startgame.sh")
        database.games[game_id].install_script_file = install_script
        database.games[game_id].uninstall_script_file = uninstall_script
        database.games[game_id].install_path = path
        database.games[game_id].online_id = game_id
        if database.games[game_id].install_script != "404":
            site_conn.download_script(install_script, database.games[game_id].install_script)
        if database.games[game_id].uninstall_script != "404":
            site_conn.download_script(uninstall_script, database.games[game_id].uninstall_script)
        if database.games[game_id].launch_script != "404":
            site_conn.download_script(launch_script, database.games[game_id].launch_script)
        database.store()
        # then we need to run the install script on the target's directory
        if os.path.exists(database.games[game_id].install_script_file):
            print "Executing install script..."
            subprocess.call("%s %s" % (database.games[game_id].install_script_file, database.games[game_id].install_path), shell=True)
        print "Done."
        print "%s installed in %s" % (database.games[game_id].full_name, path)

    except Usage, err:
        print >>sys.stderr, err.msg
        print >>sys.stderr, "    for help use --help"
        return 2
    return 0

def do_uninstall(args):
    global general_path
    global config_path
    global database_path
    if len(args) == 0:
        raise Usage("Wrong number of arguments, you need at least the id of the game you wish to install/uninstall")
    game_id = args[0]
    settings = load_settings(config_path)
    database = gog_db.GogDatabase(database_path)
    database.update()
    if not database.has_game(game_id):
        raise Usage("Game is not installed in the current database")
    print "Running uninstall script..."
    path = database.games[game_id].install_path
    if database.games[game_id].uninstall_script != "404" and os.path.exists(database.games[game_id].uninstall_script_file):
        uninstall_script = os.path.join(general_path,"scripts","uninstall_"+game_id)
        subprocess.call("%s %s" % (database.games[game_id].uninstall_script_file, database.games[game_id].install_path), shell=True)
    print "Removing remaining files..."
    shutil.rmtree(path)
    if os.path.isfile(database.games[game_id].install_script_file):
        os.unlink(database.games[game_id].install_script_file)
    if os.path.isfile(database.games[game_id].uninstall_script_file):
        os.unlink(database.games[game_id].uninstall_script_file)
    print "Updating database..."
    name = database.games[game_id].full_name
    database.remove_game(game_id)
    database.store()
    print "%s has been successfully removed." % name 

#TODO: eventually merge do_launch and do_uninstall under the same wrapper
def do_launch(args):
    global config_path
    global database_path
    if len(args) == 0:
        raise Usage("Wrong number of arguments, you need at least the id of the game you wish to install/uninstall")
    game_id = args[0]
    settings = load_settings(config_path)
    database =  gog_db.GogDatabase(database_path)
    database.update()
    if not database.has_game(game_id):
        raise Usage("Game is not installed in the current database")
    game = database.games[game_id]
    startup = os.path.join(game.install_path,"startgame.sh")
    subprocess.Popen([startup])       

def print_list():
    database = gog_db.GogDatabase(database_path)
    database.update()
    for k in database.games.keys():
        print " ----------- "
        print "Game ID: %s" % k 
        print "Game Title: %s" % database.games[k].full_name
        print "Install Path: %s" % database.games[k].install_path
    print " ----------- "

def print_avail(beta):
    if not beta:
        data = site_conn.obtain_available_games()
    else:
        data = site_conn.obtain_beta_available_games()
    for k in data.keys():
        print " ----------- "
        print "Game ID: %s" % k
        print "Game Title: %s" % data[k]["title"]
        if beta:
            print "Beta Status: %s" % ("No " if data[k]["released"] == "1" else "Yes" )

    print " ----------- "

if __name__ == "__main__":
    sys.exit(main())
